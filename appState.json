{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f": {
        "id": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
        "parent": null,
        "name": "LambdaSNS",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "d208d08c-c661-4a9c-8b84-5a3be13c9a94",
          "75df272d-d232-43df-9648-86a980f1a19c",
          "05bfcffd-9744-4f23-89d0-3ce97fd8f097",
          "4d68f474-8705-43b9-bfab-301d2efece87",
          "a0427590-749e-4c7c-a1c9-c666864ec1ba",
          "b05d9142-3d79-4cdf-808a-f24a51e5030c",
          "30550c2b-0a41-421f-ae44-6b0f1a4595dc"
        ],
        "isRemovable": false,
        "filePath": "LambdaSNS"
      },
      "d208d08c-c661-4a9c-8b84-5a3be13c9a94": {
        "id": "d208d08c-c661-4a9c-8b84-5a3be13c9a94",
        "parent": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
        "name": "lambda.js",
        "type": "JS_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "LambdaSNS/lambda.js",
        "code": "let AWS = require('aws-sdk');\nconst sns = new AWS.SNS();\n\nexports.handler = function (event, context, callback) {\n\n    let receiver = event['receiver'];\n    let sender = event['sender'];\n    let message = event['message'];\n\n    console.log(\"Sending message\", message, \"to receiver\", receiver);\n\n    sns.publish({\n        Message: message,\n        MessageAttributes: {\n            'AWS.SNS.SMS.SMSType': {\n                'DataType': 'String',\n                'StringValue': 'Promotional'\n            },\n            'AWS.SNS.SMS.SenderID': {\n                'DataType': 'String',\n                'StringValue': sender\n            }\n        },\n        PhoneNumber: receiver\n    }).promise()\n        .then(data => {\n            // your code goes here\n            console.log(\"Sent message to\", receiver);\n\t\t\tcallback(null, data);\n        })\n        .catch(err => {\n            // error handling goes here\n            console.log(\"Sending failed\", err);\n\t\t\tcallback(err);\n        });\n\n}",
        "config": {
          "runtime": "nodejs8.10",
          "handler": "handler",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusWest2SMSGatewaysendSMSpost",
            "config": {}
          }
        ],
        "testCases": {
          "0eb08f81-4a9a-459a-a859-44ddf14d836c": {
            "id": "0eb08f81-4a9a-459a-a859-44ddf14d836c",
            "functionId": "d208d08c-c661-4a9c-8b84-5a3be13c9a94",
            "name": "Mensaje prueba",
            "event": "{\n \"receiver\": \"+527771302351\",\n \"sender\": \"KOFSMS\",\n \"message\": \"Alta de cliente\"\n}"
          },
          "18394956-b41b-4cd3-9d02-61b1677d2b9e": {
            "id": "18394956-b41b-4cd3-9d02-61b1677d2b9e",
            "name": "geocoder",
            "functionId": "d208d08c-c661-4a9c-8b84-5a3be13c9a94",
            "event": "{\n    \"lat\": \"value1\",\n    \"lon\": \"value2\"\n}"
          }
        }
      },
      "75df272d-d232-43df-9648-86a980f1a19c": {
        "id": "75df272d-d232-43df-9648-86a980f1a19c",
        "parent": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
        "name": "mail.js",
        "type": "JS_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "LambdaSNS/mail.js",
        "code": "exports.handler = function(event, context, callback) {\n    \n    let to = event['to'];\n    let cc = event['cc'];\n    let bcc = event['bcc'];\n    let subject = event['subject'];\n    let body = event['body'];\n\n    callback(null, {\"message\": \"Correo enviado\"});\n\n}",
        "config": {
          "runtime": "nodejs8.10",
          "handler": "handler",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusWest2MailGatewaysendEmailpost",
            "config": {}
          }
        ]
      },
      "05bfcffd-9744-4f23-89d0-3ce97fd8f097": {
        "id": "05bfcffd-9744-4f23-89d0-3ce97fd8f097",
        "parent": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
        "name": "geocoder.js",
        "type": "JS_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "LambdaSNS/geocoder.js",
        "code": "var Request = require(\"request\");\n\nexports.handler = function(event, context, callback) {\n    \n    let lat = event['lat'];\n    let lon = event['lon'];\n    let geocoder = {\n        numero: \"\",\n        calle: \"\",\n        colonia: \"\",\n        municipio: \"\",\n        estado: \"\",\n        pais: \"\",\n        codigoPostal: \"\"\n    }\n    \n    Request.get(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + lat + \",\" + lon + \"&key=AIzaSyB_H0OkKqjnld_RXVKXClJbENg4xO4eVxQ\", (error, response, body) => {\n        if(error) {\n            return console.dir(error);\n        }\n        let api = JSON.parse(body);\n        let direccion = api.results[0];\n        let dir = direccion.address_components\n        \n        dir.forEach(function(element) {\n            if (element.types[0] == \"street_number\") {\n                geocoder.numero = element.long_name;\n            }\n            if (element.types[0] == \"route\") {\n                geocoder.calle = element.long_name;\n            }\n            if (element.types[0] == \"neighborhood\") {\n                geocoder.municipio = element.long_name;\n            }\n            if (element.types[0] == \"political\") {\n                geocoder.colonia = element.long_name;\n            }\n            if (element.types[0] == \"locality\") {\n                geocoder.estado = element.long_name;\n            }\n            if (element.types[0] == \"country\") {\n                geocoder.pais = element.long_name;\n            }\n            if (element.types[0] == \"postal_code\") {\n                geocoder.codigoPostal = element.long_name;\n            }\n            console.log(element)\n            console.log(geocoder)\n        })\n        console.log(direccion);\n        callback(null, geocoder);\n    });\n}",
        "config": {
          "runtime": "nodejs8.10",
          "handler": "handler",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusWest2GeoGatewaygeocoderpost",
            "config": {}
          }
        ]
      },
      "4d68f474-8705-43b9-bfab-301d2efece87": {
        "id": "4d68f474-8705-43b9-bfab-301d2efece87",
        "parent": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
        "name": "clientes.js",
        "type": "JS_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "LambdaSNS/clientes.js",
        "code": "exports.handler = function(event, context, callback) {\n    \n    let cliente = {\n        //Back\n    idOficinaMovil: \"\", //Identificador aleatorio para OM (16)\n    orgVentas: \"0142\", //Dato fijo de organizaci칩n de ventas 0142\n    region: \"\", //**Generar con el catalogo de codigo postal\n    distribuidora: \"\", //**Generar con el catalogo de codigo postal\n    KUNNR: \"CD00000000\", //Dato fijo para clientes nuevos\n    idSolicitud: \"\", //Generar aleatorio (22),\n    solicitudAlta: \"ZB18\", //Dato fijo para altas de cliente\n    rutaPreventa: \"\", //**Generar con el catalogo de rutas\n    nota: \".\", //Se solicita en la mascara de clientes\n    fechaCreacion: \"\", //Extraer con la informaci칩n de fechaAlta\n    horaCreacion: \"\", //Extraer con la informaci칩n de fechaAlta\n        //Front Appian\n    idCliente: event['idCliente'], //Generado incrementalmente desde Appian, temporal hasta que se tenga el definitivo de SAP\n    codigoCliente: event['codigoCliente'], //Usuario final que genera el transaccional\n    fechaAlta: event['fechaAlta'], //Generada por Appian\n    nombreTienda: event['nombreTienda'], //Capturada en Appian\n    nombreContacto: event['nombreContacto'], //Capturado en Appian\n    apellidoContacto: event['apellidoContacto'], //Capturado en Appian\n    felfijo: event['telefono'], //Capturado en Appian\n    celular: event['celular'], //Capturado en Appian\n    telfijo_cel: event['celular'],\n    correo: event['correo'], //Capturado en Appian\n    latitud: event['latitud'], //Capturado en Appian con gps\n    longitud: event['longitud'], //Capturado en Appian con gps\n    codigoPostal: event['codigoPostal'], //Capturado en Appian\n    estado: event['estado'], //Capturado en Appian\n    claveEstado: \"\", //**buscar en cat치logo\n    municipio: event['municipio'], //Capturado en Appian\n    colonia: event['colonia'], //Capturado en Appian\n    calle: event['calle'], //Capturado en Appian\n    callecon: \".\", //dato dummy\n    entrecalle1: \".\", //dato dummy\n    numeroExt: event['numeroExt'], //Capturado en Appian\n    lote: \".\", //dato dummy\n    manzana: \".\", //dato dummy\n    numeroInt: event['numeroInt'], //Capturado en Appian\n    enrejado: \"\", //Capturado en Appian\n    planVisitaRutaPreventa: \"\", //**Catalogo de rutas\n    rutaDeReparto: event['rutaDeReparto'], //Capturado en Appian\n        //Visita\n    diasVisita: event['diasVisita'],\n    lunes: \"\",\n    martes: \"\",\n    miercoles: \"\",\n    jueves: \"\",\n    viernes: \"\",\n    sabado: \"\",\n    diaEntrega: event['rutaEntrega'], //se genera con catalogo de metodo desde Appian\n    remision: event['remision'],\n    factura: \"\", // si trae datos de RFC se considera como True\n    noImpresion: \"\",\n    regimenFiscal: event['regimenFiscal'],\n    razonSocial: event['razonSocial'], //Ingresada en caso de que sea persona moral\n    RFCnombre: event['RFCnombre'],\n    RFCapellidos: event['RFCapellidos'],\n    RFC: event['RFC'],\n    RFCcodigoPostal: event['RFCcodigoPostal'],\n    RFCestado: event['RFCestado'],\n    RFCmunicipio: event['RFCmunicipio'],\n    RFCcolonia: event['RFCcolonia'],\n    RFCcalle: event['RFCcalle'],\n    RFCnumeroExt: event['RFCnumeroExt'],\n    RFCnumeroInt: event['RFCnumeroInt'],\n    CFDI: event['CFDI'],\n    descripcion: event['descripcion'],\n    ISSCOM: {\n        cuestionario: event['ISSCOM.cuestionario'],\n        p1: event['ISSCOM.p1'],\n        p2: event['ISSCOM.p2'],\n        p3: event['ISSCOM.p3'],\n        p4: event['ISSCOM.p4'],\n        p5: event['ISSCOM.p5'] \n        },\n    GEC: {\n        p1: event['GEC.p1'],\n        p2: event['GEC.p2'],\n        p3: event['GEC.p3']\n        }\n    };\n\n    let pedidos = event['productos'];\n\n    pedidos.forEach(function(element) {\n        console.log(element);\n    });\n\n\n\n    callback(null, {\"message\": \"Cliente creado\"});\n}",
        "config": {
          "runtime": "nodejs8.10",
          "handler": "handler",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusWest2ClientesGatewayaltaClientespost",
            "config": {}
          }
        ]
      },
      "a0427590-749e-4c7c-a1c9-c666864ec1ba": {
        "id": "a0427590-749e-4c7c-a1c9-c666864ec1ba",
        "parent": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
        "name": "consultaClientes.js",
        "type": "JS_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "LambdaSNS/consultaClientes.js",
        "code": "exports.handler = function(event, context, callback) {\n    let idCliente = event['idCliente'];\n    \n    callback(null, {\"codigoCliente\": idCliente});\n}",
        "config": {
          "runtime": "nodejs8.10",
          "handler": "handler",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusWest2ConsultaClientesGatewayconsultaClientespost",
            "config": {}
          }
        ]
      },
      "b05d9142-3d79-4cdf-808a-f24a51e5030c": {
        "id": "b05d9142-3d79-4cdf-808a-f24a51e5030c",
        "parent": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
        "name": "altaClientes.js",
        "type": "JS_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "LambdaSNS/altaClientes.js",
        "code": "let SL_AWS = require('slappforge-sdk-aws');\nlet connectionManager = require('./ConnectionManager');\nconst rds = new SL_AWS.RDS(connectionManager);\nlet AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\nvar json2xls = require('json2xls');\nconst csv = require('csvtojson');\nconst uuidv4 = require('uuid/v4');\nvar mysql = require('mysql');\n\nexports.handler = function (event, context, callback) {\n    console.log(\"evento\", event.cliente)\n    let cliente = {\n        //Back\n        idOficinaMovil: event.cliente['idCliente'], //Identificador aleatorio para OM (16)\n        EVENTOGUID: uuidv4(), // OMTEMP15\n        VKORG: \"0142\", //Dato fijo de organizaci칩n de ventas 0142\n        KDGRP: \"\", //**Generar con el catalogo de codigo postal (indentificador)\n        BZIRK: \"\", //**Generar con el catalogo de codigo postal (Distrbuidora)\n        KUNNR: \"CD00000000\", //Dato fijo para clientes nuevos (N칰mero de cliente definitivo)\n        ID_Solicitud: \"\", //Generar aleatorio (22),\n        ID_Motivo_Solicitud: \"ZB18\", //Dato fijo para altas de cliente\n        Route: \"\", //**Generar con el catalogo de rutas (Ruta de preventa)\n        ZTEXT: \"\", //Se solicita en la mascara de clientes\n        ZFECHA: \"\", //Extraer con la informaci칩n de fechaAlta (Se coloca por .NET)\n        ZHORA: \"\", //Extraer con la informaci칩n de fechaAlta (Se coloca por .NET)\n        fechaSolicitud: \"\", //Extraer fecha de lambda\n        //Front Appian\n        //idCliente: event['idCliente'], //Generado incrementalmente desde Appian, temporal hasta que se tenga el definitivo de SAP\n        //codigoCliente: event['codigoCliente'], //Usuario final que genera el transaccional\n        //fechaAlta: event['fechaAlta'], //Generada por Appian\n        ZNAME1: event.cliente['nombreTienda'], //Capturada en Appian (Nombre de la tienda)\n        NAME_FIRST: event.cliente['nombreContacto'], //Capturado en Appian (Nombre del contacto)\n        NAME_LAST: event.cliente['apellidoContacto'], //Capturado en Appian (Apellido del contacto)\n        ZTELFIJO: event.cliente['telefono'], //Capturado en Appian (Telefono fijo)\n        ZCELULAR: event.cliente['celular'], //Capturado en Appian (telefono celular)\n        ZTELFIJO_CEL: event.cliente['celular'], //Capturado en Appian (telefono celular)\n        ZCORREO: event.cliente['correo'], //Capturado en Appian (cooreo electr칩nico)\n        ZZCRM_LAT: event.cliente['latitud'], //Capturado en Appian con gps (latitud)\n        ZZCRM_LONG: event.cliente['longitud'], //Capturado en Appian con gps (longitud)\n        ZCPOSTAL: event.cliente['codigoPostal'], //Capturado en Appian (codigo postal)\n        estado: event.cliente['estado'], //Capturado en Appian\n        ZESTPROV: \"\", //**buscar en cat치logo (clave o id del estado)\n        ZMUNIDELEG: event.cliente['municipio'], //Capturado en Appian (municipio)\n        ZCOLONIA: event.cliente['colonia'], //Capturado en Appian (colonia)\n        ZCALLE: event.cliente['calle'], //Capturado en Appian (calle)\n        ZCALLECON: \"\", //dato dummy (callecon)\n        ZENTRECALLE1: \"\", //dato dummy (entrecalle)\n        ZENTRECALLE2: \"\",\n        ZNUMEXT: event.cliente['numeroExt'], //Capturado en Appian (n칰mero exterior)\n        ZLOTE: \"\", //dato dummy\n        ZMANZANA: \"\", //dato dummy\n        ZNUMINT: event.cliente['numeroInt'], //Capturado en Appian (n칰mero interior)\n        ZENREJADO: \"\", //Capturado en Appian\n        VPTYP: \"ZPV\", //**Catalogo de rutas (plan de visita de ruta de preventa)\n        ROUTE: event.cliente['rutaDeReparto'], //Capturado en Appian\n        RUTA_REPARTO: \"\",\n        //Visita\n        diasVisita: event.cliente['diasVisita'],\n        SEQULUNES: \"\",\n        SEQUMARTES: \"\",\n        SEQUMIERCOLES: \"\",\n        SEQUJUEVES: \"\",\n        SEQUVIERNES: \"\",\n        SEQUSABADO: \"\",\n        IDMETODO: event.cliente['rutaEntrega'], //se genera con catalogo de metodo desde Appian\n        ZREQREM: event.cliente['remision'], //Bit para remisi칩n\n        ZREQFAC: \"\", // si trae datos de RFC se considera como True\n        ZPAPERLESS: \"\",\n        ZFISICAMORAL: event.cliente['regimenFiscal'], //M2, M3 y M4 para persona f칤sica\n        ZNAME4: event.cliente['razonSocial'], //Ingresada en caso de que sea persona moral\n        ZRFCNOMBRE: event.cliente['RFCnombre'],\n        ZRFCAPELLIDOS: event.cliente['RFCapellidos'],\n        ZRFC: event.cliente['RFC'],\n        ZRFCCODIGOPOSTAL: event.cliente['RFCcodigoPostal'],\n        ZRFCESTADO: event.cliente['RFCestado'],\n        ZRFCMUNDELEG: event.cliente['RFCmunicipio'],\n        ZRFCCOLONIA: event.cliente['RFCcolonia'],\n        ZRFCCALLE: event.cliente['RFCcalle'],\n        ZRFCCALLE_CON: \"\",\n        ZRFCNUM_EXT: event.cliente['RFCnumeroExt'],\n        ZRFCNUM_INT: event.cliente['RFCnumeroInt'],\n        ZCFDI: event.cliente['CFDI'],\n        //descripcion: event['descripcion'],\n        ISSCOM: \"\",\n        GEC: \"\",\n        LOCALIDAD: \"\",\n        OCASIONDECONSUMO: \"\"\n    };\n\n    let cuestionarios = {\n        ISSCOMcuestionario: event.cliente.ISSCOM['cuestionario'],\n        ISSCOMp1: event.cliente.ISSCOM['p1'],\n        ISSCOMp2: event.cliente.ISSCOM['p2'],\n        ISSCOMp3: event.cliente.ISSCOM['p3'],\n        ISSCOMp4: event.cliente.ISSCOM['p4'],\n        ISSCOMp5: event.cliente.ISSCOM['p5'],\n        GECp1: event.cliente.GEC['p1'],\n        GECp2: event.cliente.GEC['p2'],\n        GECp3: event.cliente.GEC['p3'],\n    };\n\n    let pedidos = event['productos'];\n\n    // pedidos.forEach(function (element) {\n    //     console.log(element);\n    // });\n\n    //////////////////////SQL CONNECTION//////////////////////////\n\n    var connection = mysql.createConnection({\n        host     : \"kof.cmk4tzokwqsd.us-west-2.rds.amazonaws.com\",\n        user     : \"kofadmin\",\n        password : \"CyEoDDTWfCtPY7h3NKzB\",\n        port     : 3306,\n        database : \"innodb\",\n    });\n\n    connection.connect(function(err) {\n    if (err) {\n        console.error('Database connection failed : ' + err.stack);\n        return;\n    }\n\n    console.log('Connected to database.');\n    \n    // var sql = 'INSERT INTO prueba(EVENTOGUID) VALUES ?';\n    var sql = 'INSERT INTO prueba(idOficinaMovil,EVENTOGUID,VKORG,KDGRP,BZIRK,KUNNR,ID_Solicitud,ID_Motivo_Solicitud,ZTEXT,ZFECHA,ZHORA,fechaSolicitud,ZNAME1,NAME_FIRST,NAME_LAST,ZTELFIJO,ZCELULAR,ZTELFIJO_CEL,ZCORREO,ZZCRM_LAT,ZZCRM_LONG,ZCPOSTAL,estado,ZESTPROV,ZMUNIDELEG,ZCOLONIA,ZCALLE,ZCALLECON,ZENTRECALLE1,ZENTRECALLE2,ZNUMEXT,ZLOTE,ZMANZANA,ZNUMINT,ZENREJADO,VPTYP,ROUTE,RUTA_REPARTO,diasVisita,SEQULUNES,SEQUMARTES,SEQUMIERCOLES,SEQUJUEVES,SEQUVIERNES,SEQUSABADO,IDMETODO,ZREQREM,ZREQFAC,ZPAPERLESS,ZFISICAMORAL,ZNAME4,ZRFCNOMBRE,ZRFCAPELLIDOS,ZRFC,ZRFCCODIGOPOSTAL,ZRFCESTADO,ZRFCMUNDELEG,ZRFCCOLONIA,ZRFCCALLE,ZRFCCALLE_CON,ZRFCNUM_EXT,ZRFCNUM_INT,ZCFDI,ISSCOM,GEC,LOCALIDAD,OCASIONDECONSUMO) VALUES ?';\n    var values = [[\n            cliente.idOficinaMovil,\n            cliente.EVENTOGUID,\n            cliente.VKORG,\n            cliente.KDGRP,\n            cliente.BZIRK,\n            cliente.KUNNR,\n            cliente.ID_Solicitud,\n            cliente.ID_Motivo_Solicitud,\n            cliente.ZTEXT,\n            cliente.ZFECHA,\n            cliente.ZHORA,\n            cliente.fechaSolicitud,\n            cliente.ZNAME1,\n            cliente.NAME_FIRST,\n            cliente.NAME_LAST,\n            cliente.ZTELFIJO,\n            cliente.ZCELULAR,\n            cliente.ZTELFIJO_CEL,\n            cliente.ZCORREO,\n            cliente.ZZCRM_LAT,\n            cliente.ZZCRM_LONG,\n            cliente.ZCPOSTAL,\n            cliente.estado,\n            cliente.ZESTPROV,\n            cliente.ZMUNIDELEG,\n            cliente.ZCOLONIA,\n            cliente.ZCALLE,\n            cliente.ZCALLECON,\n            cliente.ZENTRECALLE1,\n            cliente.ZENTRECALLE2,\n            cliente.ZNUMEXT,\n            cliente.ZLOTE,\n            cliente.ZMANZANA,\n            cliente.ZNUMINT,\n            cliente.ZENREJADO,\n            cliente.VPTYP,\n            cliente.ROUTE,\n            cliente.RUTA_REPARTO,\n            cliente.diasVisita,\n            cliente.SEQULUNES,\n            cliente.SEQUMARTES,\n            cliente.SEQUMIERCOLES,\n            cliente.SEQUJUEVES,\n            cliente.SEQUVIERNES,\n            cliente.SEQUSABADO,\n            cliente.IDMETODO,\n            cliente.ZREQREM,\n            cliente.ZREQFAC,\n            cliente.ZPAPERLESS,\n            cliente.ZFISICAMORAL,\n            cliente.ZNAME4,\n            cliente.ZRFCNOMBRE,\n            cliente.ZRFCAPELLIDOS,\n            cliente.ZRFC,\n            cliente.ZRFCCODIGOPOSTAL,\n            cliente.ZRFCESTADO,\n            cliente.ZRFCMUNDELEG,\n            cliente.ZRFCCOLONIA,\n            cliente.ZRFCCALLE,\n            cliente.ZRFCCALLE_CON,\n            cliente.ZRFCNUM_EXT,\n            cliente.ZRFCNUM_INT,\n            cliente.ZCFDI,\n            cliente.ISSCOM,\n            cliente.GEC,\n            cliente.LOCALIDAD,\n            cliente.OCASIONDECONSUMO\n            ]];\n\n        connection.query(sql, [values], function (err, result) {\n    \n    if (err) throw err;\n    console.log(\"Number of records inserted: \" + result.affectedRows);\n    connection.end();\n  });\n  });\n\n\n    // You can pass the existing connection to this function.\n    // A new connection will be created if it's not present as the third param \n    // You must always end/destroy the DB connection after it's used\n    // connection.query({\n    //     // instanceIdentifier: 'kof',\n    //     query: 'INSERT INTO clientes(idOficinaMovil,EVENTOGUID,VKORG,KDGRP,KDGRP,BZIRK,KUNNR,ID_Solicitud,ID_Motivo_Solicitud,ZTEXT,ZFECHA,ZHORA,fechaSolicitud,ZNAME1,NAME_FIRST,NAME_LAST,ZTELFIJO,ZCELULAR,ZTELFIJO_CEL,ZCORREO,ZZCRM_LAT,ZZCRM_LONG,ZCPOSTAL,estado,ZESTPROV,ZMUNIDELEG,ZCOLONIA,ZCALLE,ZCALLECON,ZENTRECALLE1,ZENTRECALLE2,ZNUMEXT,ZLOTE,ZMANZANA,ZNUMINT,ZENREJADO,VPTYP,ROUTE,RUTA_REPARTO,diasVisita,SEQULUNES,SEQUMARTES,SEQUMIERCOLES,SEQUJUEVES,SEQUVIERNES,SEQUSABADO,IDMETODO,ZREQREM,ZREQFAC,ZPAPERLESS,ZFISICAMORAL,ZNAME4,ZRFCNOMBRE,ZRFCAPELLIDOS,ZRFC,ZRFCCODIGOPOSTAL,ZRFCESTADO,ZRFCMUNDELEG,ZRFCCOLONIA,ZRFCCALLE,ZRFCCALLE_CON,ZRFCNUM_EXT,ZRFCNUM_INT,ZCFDI,ISSCOM,GEC,LOCALIDAD,OCASIONDECONSUMO) VALUES ?',\n    //     values: [\n    //         cliente.idOficinaMovil,\n    //         cliente.EVENTOGUID,\n    //         cliente.VKORG,\n    //         cliente.KDGRP,\n    //         cliente.BZIRK,\n    //         cliente.KUNNR,\n    //         cliente.ID_Solicitud,\n    //         cliente.ID_Motivo_Solicitud,\n    //         cliente.ZTEXT,\n    //         cliente.ZFECHA,\n    //         cliente.ZHORA,\n    //         cliente.fechaSolicitud,\n    //         cliente.ZNAME1,\n    //         cliente.NAME_FIRST,\n    //         cliente.NAME_LAST,\n    //         cliente.ZTELFIJO,\n    //         cliente.ZCELULAR,\n    //         cliente.ZTELFIJO_CEL,\n    //         cliente.ZCORREO,\n    //         cliente.ZZCRM_LAT,\n    //         cliente.ZZCRM_LONG,\n    //         cliente.ZCPOSTAL,\n    //         cliente.estado,\n    //         cliente.ZESTPROV,\n    //         cliente.ZMUNIDELEG,\n    //         cliente.ZCOLONIA,\n    //         cliente.ZCALLE,\n    //         cliente.ZCALLECON,\n    //         cliente.ZENTRECALLE1,\n    //         cliente.ZENTRECALLE2,\n    //         cliente.ZNUMEXT,\n    //         cliente.ZLOTE,\n    //         cliente.ZMANZANA,\n    //         cliente.ZNUMINT,\n    //         cliente.ZENREJADO,\n    //         cliente.VPTYP,\n    //         cliente.ROUTE,\n    //         cliente.RUTA_REPARTO,\n    //         cliente.diasVisita,\n    //         cliente.SEQULUNES,\n    //         cliente.SEQUMARTES,\n    //         cliente.SEQUMIERCOLES,\n    //         cliente.SEQUJUEVES,\n    //         cliente.SEQUVIERNES,\n    //         cliente.SEQUSABADO,\n    //         cliente.IDMETODO,\n    //         cliente.ZREQREM,\n    //         cliente.ZREQFAC,\n    //         cliente.ZPAPERLESS,\n    //         cliente.ZFISICAMORAL,\n    //         cliente.ZNAME4,\n    //         cliente.ZRFCNOMBRE,\n    //         cliente.ZRFCAPELLIDOS,\n    //         cliente.ZRFC,\n    //         cliente.ZRFCCODIGOPOSTAL,\n    //         cliente.ZRFCESTADO,\n    //         cliente.ZRFCMUNDELEG,\n    //         cliente.ZRFCCOLONIA,\n    //         cliente.ZRFCCALLE,\n    //         cliente.ZRFCCALLE_CON,\n    //         cliente.ZRFCNUM_EXT,\n    //         cliente.ZRFCNUM_INT,\n    //         cliente.ZCFDI,\n    //         cliente.ISSCOM,\n    //         cliente.GEC,\n    //         cliente.LOCALIDAD,\n    //         cliente.OCASIONDECONSUMO\n    //         ]\n    // }, function (error, results, connection) {\n    //     if (error) {\n    //         console.log(\"Error occurred\");\n    //         throw error;\n    //     } else {\n    //         console.log(\"Success\")\n    //         console.log(results);\n    //     }\n\n    //     connection.end();\n    // });\n\n\n    // You must always end/destroy the DB connection after it's used\n    // rds.beginTransaction({\n    //     instanceIdentifier: 'kof'\n    // }, function (error, connection) {\n    //     if (error) {\n    //         throw error;\n    //     }\n    // });\n\n\n    // rds.query({\n    //     instanceIdentifier: 'innodb',\n    //     query: 'INSERT INTO clientes(EVENTOGUID)',\n    //     inserts: [\n    //         cliente.EVENTOGUID,\n    //     ]\n    // }, function (error, results, connection) {\n    //     if (error) {\n    //         console.log(\"Error occurred\");\n    //         throw error;\n    //     } else {\n    //         console.log(\"Success\")\n    //         console.log(results);\n    //     }\n\n    //     connection.end();\n    // });\n\n\n    //////////////////////////////////////////////////////////////\n\n\n    // let xls = json2xls(cliente);\n    // // let csv = json2csv(cliente);\n    // var bufferdata = new Buffer(xls, 'binary')\n    // console.log(\"bufferdata\", bufferdata);\n    // s3.getObject({\n    //     'Bucket': \"clienteskof\",\n    //     'Key': \"2019-09-28_clientes.csv\"\n    // }).promise()\n    //     .then(data => {\n    //         // var buf = Buffer.from(JSON.stringify(data.Body));\n    //         // var temp = JSON.parse(buf.toString());\n    //         let stream = data.Body\n    //         // let archivo = csv().fromStream(stream);\n    //         console.log(\"Archivo en buffer:\", stream.toJSON());           // successful response\n    //         // console.log(\"Archivo en buffer:\", data.Body);\n    //         // console.log(\"Archivo en json:\", temp);\n    //         /*\n    //         data = {\n    //             AcceptRanges: \"bytes\", \n    //             ContentLength: 3191, \n    //             ContentType: \"image/jpeg\", \n    //             ETag: \"\\\"6805f2cfc46c0f04559748bb039d69ae\\\"\", \n    //             LastModified: \"<Date Representation>\", \n    //             Metadata: {}, \n    //             TagCount: 2, \n    //             VersionId: \"null\"\n    //         }\n    //         */\n    //     })\n    //     .catch(err => {\n    //         console.log(err, err.stack); // an error occurred\n    //     });\n\n    // // let stream = s3.getObject({\n    // //     'Bucket': \"clienteskof\",\n    // //     'Key': \"2019-09-28_clientes.csv\"\n    // // }).createReadStream();\n    // // const json = csv().fromStream(stream);\n    // // console.log(\"buffer json:\", json)\n\n\n    // s3.putObject({\n    //     \"Body\": bufferdata,\n    //     \"Bucket\": \"clienteskof\",\n    //     \"Key\": \"clientes.xlsx\"\n    // })\n    //     .promise()\n    //     .then(data => {\n    //         console.log(\"Escritura correcta:\", data);           // successful response\n    //         /*\n    //         data = {\n    //             ETag: \"\\\"6805f2cfc46c0f04559748bb039d69ae\\\"\",\n    //             VersionId: \"pSKidl4pHBiNwukdbcPXAIs.sshFFOc0\"\n    //         }\n    //         */\n    //     })\n    //     .catch(err => {\n    //         console.log(err, err.stack); // an error occurred\n    //     });\n\n\n    // callback(null, { \"message\": \"Alta correcta\" });\n    callback(null, cliente);\n}",
        "config": {
          "runtime": "nodejs8.10",
          "handler": "handler",
          "timeout": 303,
          "memory": 256,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusWest2KOFClientesGatewayaltapost",
            "config": {}
          }
        ],
        "testCases": {
          "b206dbad-f84f-44ec-a945-b840c540dbd0": {
            "id": "b206dbad-f84f-44ec-a945-b840c540dbd0",
            "name": "Alta",
            "functionId": "b05d9142-3d79-4cdf-808a-f24a51e5030c",
            "event": "{\n\t\"idPedido\":6,\n\t\"productos\":\n\t[\n\t\t{\n\t\t\t\"idProductoPedido\":16,\n\t\t\t\"idProducto\":{\n\t\t\t\t\"idProducto\":1,\n\t\t\t\t\"nombreProducto\":\"Coca-Cola\",\n\t\t\t\t\"descripcionProducto\":\"335 ml\",\n\t\t\t\t\"imagenProducto\":{\"id\":36771},\n\t\t\t\t\"ingredientesProducto\":\"\",\n\t\t\t\t\"informacionNutricionalProducto\":\"\"},\n\t\t\t\"cantidad\":23,\n\t\t\t\"precio\":\"\"\n\t\t},\n\t\t\t\n\t\t{\n\t\t\t\"idProductoPedido\":17,\n\t\t\t\"idProducto\":{\n\t\t\t\t\"idProducto\":2,\n\t\t\t\t\"nombreProducto\":\"Coca-Cola\",\n\t\t\t\t\"descripcionProducto\":\"2 L\",\n\t\t\t\t\"imagenProducto\":{\"id\":36770},\n\t\t\t\t\"ingredientesProducto\":\"\",\n\t\t\t\t\"informacionNutricionalProducto\":\"\"},\n\t\t\t\"cantidad\":23,\n\t\t\t\"precio\":\"\"\n\t\t},\n\t\t{\n\t\t\t\"idProductoPedido\":18,\n\t\t\t\"idProducto\":{\n\t\t\t\t\"idProducto\":3,\n\t\t\t\t\"nombreProducto\":\"Coca-Cola\",\n\t\t\t\t\"descripcionProducto\":\"500 ml\",\n\t\t\t\t\"imagenProducto\":{\"id\":36772},\n\t\t\t\t\"ingredientesProducto\":\"\",\n\t\t\t\t\"informacionNutricionalProducto\":\"\"},\n\t\t\t\"cantidad\":23,\n\t\t\t\"precio\":\"\"\n\t\t},\n\t\t{\n\t\t\t\"idProductoPedido\":19,\n\t\t\t\"idProducto\":{\n\t\t\t\t\"idProducto\":4,\n\t\t\t\t\"nombreProducto\":\"Sidral Mundet\",\n\t\t\t\t\"descripcionProducto\":\"3 L\",\n\t\t\t\t\"imagenProducto\":{\"id\":36773},\n\t\t\t\t\"ingredientesProducto\":\"\",\n\t\t\t\t\"informacionNutricionalProducto\":\"\"},\n\t\t\t\"cantidad\":23,\n\t\t\t\"precio\":\"\"\n\t\t},\n\t\t{\n\t\t\t\"idProductoPedido\":20,\n\t\t\t\"idProducto\":{\n\t\t\t\t\"idProducto\":5,\n\t\t\t\t\"nombreProducto\":\"ciel\",\n\t\t\t\t\"descripcionProducto\":\"1 L\",\n\t\t\t\t\"imagenProducto\":{\"id\":36769},\n\t\t\t\t\"ingredientesProducto\":\"\",\n\t\t\t\t\"informacionNutricionalProducto\":\"\"},\n\t\t\t\"cantidad\":23,\n\t\t\t\"precio\":\"\"\n\t\t},\n\t\t{\n\t\t\t\"idProductoPedido\":21,\n\t\t\t\"idProducto\":{\n\t\t\t\t\"idProducto\":6,\n\t\t\t\t\"nombreProducto\":\"Santa Clara\",\n\t\t\t\t\"descripcionProducto\":\"1 L\",\n\t\t\t\t\"imagenProducto\":{\"id\":36775},\n\t\t\t\t\"ingredientesProducto\":\"\",\n\t\t\t\t\"informacionNutricionalProducto\":\"\"},\n\t\t\t\"cantidad\":23,\n\t\t\t\"precio\":\"\"},\n\t\t{\n\t\t\t\"idProductoPedido\":22,\n\t\t\t\"idProducto\":{\n\t\t\t\t\"idProducto\":7,\n\t\t\t\t\"nombreProducto\":\"Del Valle\",\n\t\t\t\t\"descripcionProducto\":\"1 L\",\n\t\t\t\t\"imagenProducto\":{\"id\":36776},\n\t\t\t\t\"ingredientesProducto\":\"\",\n\t\t\t\t\"informacionNutricionalProducto\":\"\"},\n\t\t\t\"cantidad\":23,\n\t\t\t\"precio\":\"\"\n\t\t}\n\t],\n\t\"cliente\":\n\t{\n\t\t\"idCliente\":1,\n\t\t\"codigoCliente\":\"CLI_TEMP1\",\n\t\t\"fechaAlta\":\"2019-08-26T15:06:59Z\",\n\t\t\"nombreTienda\":\"Abarrotes Kevin\",\n\t\t\"nombreContacto\":\"Kevin\",\n\t\t\"apellidoContacto\":\"Olascoaga\",\n\t\t\"telefono\":\"7771302351\",\n\t\t\"celular\":\"7771302351\",\n\t\t\"correo\":\"kolascoaga@minsait.com\",\n\t\t\"latitud\":19.3585968,\n\t\t\"longitud\":-99.2765121,\n\t\t\"codigoPostal\":\"01219\",\n\t\t\"estado\":\"Ciudad de M칠xico\",\n\t\t\"municipio\":\"Cuajimalpa\",\n\t\t\"colonia\":\"Contader\",\n\t\t\"calle\":\"Mario Pani\",\n\t\t\"numeroExt\":\"100\",\n\t\t\"numeroInt\": \"\",\n\t\t\"rutaDeReparto\":\"ZA0480\",\n\t\t\"diaEntrega\": 2,\n\t\t\"remision\":\"\",\n\t\t\"regimenFiscal\":\"X\",\n\t\t\"razonSocial\": \"X\",\n\t\t\"RFCnombre\":\"Kevin\",\n\t\t\"RFCapellidos\":\"Olascoaga\",\n\t\t\"RFC\":\"OAOK9508022E2\",\n\t\t\"RFCcodigoPostal\":\"11500\",\n\t\t\"RFCestado\":\"Ciudad de M칠xico\",\n\t\t\"RFCmunicipio\":\"Miguel Hidalgo\",\n\t\t\"RFCcolonia\":\"Lomas Hermosa\",\n\t\t\"RFCcalle\":\"Presa Salinillas\",\n\t\t\"RFCnumeroExt\":\"69\",\n\t\t\"RFCnumeroInt\":\"202\",\n\t\t\"CFDI\":\"G03\",\n\t\t\"descripcion\":\"\",\n\t\t\"ISSCOM\":\n\t\t{\n\t\t\t\"idCuestionario\":7,\n\t\t\t\"cuestionario\":\"3\",\n\t\t\t\"p1\":\"B\",\n\t\t\t\"p2\":\"\",\n\t\t\t\"p3\":\"\",\n\t\t\t\"p4\":\"\",\n\t\t\t\"p5\":\"\"\n\t\t},\n\t\t\"GEC\":\n\t\t{\n\t\t\t\"idCuestionario\":7,\n\t\t\t\"p1\":\"N\",\n\t\t\t\"p2\":\"S\",\n\t\t\t\"p3\":\"S\"\n\t\t}\n\t}\n}"
          }
        }
      },
      "30550c2b-0a41-421f-ae44-6b0f1a4595dc": {
        "id": "30550c2b-0a41-421f-ae44-6b0f1a4595dc",
        "parent": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
        "name": "ConnectionManager.js",
        "type": "JS_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "LambdaSNS/ConnectionManager.js",
        "code": "module.exports = function() {\n    this.dbConnections = [];\n\n    this.dbConnections[\"kof\"] = {\n        host: \"kof.cmk4tzokwqsd.us-west-2.rds.amazonaws.com\",\n        port: \"3306\",\n        user: \"kofadmin\",\n        password: process.env.Password_rdsKof,\n        database: \"undefined\"\n    };\n};"
      }
    },
    "deletedFiles": [],
    "rootNode": "2c2fe5a7-7a86-4aa0-beb8-43c1c8b5437f",
    "openFiles": [
      "4d68f474-8705-43b9-bfab-301d2efece87",
      "05bfcffd-9744-4f23-89d0-3ce97fd8f097",
      "a0427590-749e-4c7c-a1c9-c666864ec1ba",
      "b05d9142-3d79-4cdf-808a-f24a51e5030c",
      "d208d08c-c661-4a9c-8b84-5a3be13c9a94",
      "75df272d-d232-43df-9648-86a980f1a19c"
    ],
    "currentFileId": "b05d9142-3d79-4cdf-808a-f24a51e5030c",
    "resources": {
      "apigusWest2SMSGatewaysendSMSpost": {
        "name": "apigusWest2SMSGatewaysendSMSpost",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "SMSGateway",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "sendSMS",
          "resourcePath": "/sendSMS",
          "restMethod": "POST",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      },
      "snsDirectSMSResource": {
        "name": "snsDirectSMSResource",
        "type": "SNS",
        "config": {
          "snsType": 1,
          "numbers": [
            "@{receiver}"
          ]
        }
      },
      "apigusWest2MailGatewaysendEmailpost": {
        "name": "apigusWest2MailGatewaysendEmailpost",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "MailGateway",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "sendEmail",
          "resourcePath": "/sendEmail",
          "restMethod": "POST",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      },
      "apigusWest2GeoGatewaygeocoderget": {
        "name": "apigusWest2GeoGatewaygeocoderget",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "GeoGateway",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "geocoder",
          "resourcePath": "/geocoder",
          "restMethod": "GET",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      },
      "apigusWest2GeoGatewaygeocoderpost": {
        "name": "apigusWest2GeoGatewaygeocoderpost",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "GeoGateway",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "geocoder",
          "resourcePath": "/geocoder",
          "restMethod": "POST",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      },
      "apigusWest2InventarioGatewayinventarioany": {
        "name": "apigusWest2InventarioGatewayinventarioany",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "InventarioGateway",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "inventario",
          "resourcePath": "/inventario",
          "restMethod": "ANY",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      },
      "apigusWest2ConsultaClientesGatewayconsultaClientespost": {
        "name": "apigusWest2ConsultaClientesGatewayconsultaClientespost",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "ConsultaClientesGateway",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "consultaClientes",
          "resourcePath": "/consultaClientes",
          "restMethod": "POST",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      },
      "apigusWest2ClientesGatewayaltaClientespost": {
        "name": "apigusWest2ClientesGatewayaltaClientespost",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "ClientesGateway",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "altaClientes",
          "resourcePath": "/altaClientes",
          "restMethod": "POST",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      },
      "apigusWest2ClientesGatewayaltaDeClientespost": {
        "name": "apigusWest2ClientesGatewayaltaDeClientespost",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "ClientesGateway",
          "apiId": "xtp9vbk9k4",
          "endpointType": "EDGE",
          "rootResourceId": "qi91nr3urc",
          "existingResources": {
            "/altaClientes": "aps7r8",
            "/": "qi91nr3urc"
          },
          "resourceMode": 0,
          "resourceName": "altaDeClientes",
          "resourcePath": "/altaDeClientes",
          "restMethod": "POST",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      },
      "s3clienteskof": {
        "name": "s3clienteskof",
        "type": "S3",
        "config": {
          "mode": 1,
          "bucket": {
            "region": "us-west-2",
            "name": "clienteskof"
          }
        }
      },
      "rds-kof": {
        "name": "rds-kof",
        "type": "RDS",
        "config": {
          "editMode": false,
          "operation": 1,
          "rdsInstance": {
            "rdsEngineType": "mysql",
            "rdsEdition": "mysql",
            "rdsInstanceSpec": {
              "dbInstanceClass": "db.t2.micro",
              "dbLicenseModel": "general-public-license",
              "dbEngineVersion": "5.7.22"
            },
            "rdsSetting": {
              "instanceIdentifier": "kof",
              "masterUsername": "kofadmin",
              "masterPassword": "CyEoDDTWfCtPY7h3NKzB"
            },
            "rdsDBOptions": {
              "dbPort": 3306
            },
            "rdsInstanceArn": "arn:aws:rds:us-west-2:121721526963:db:kof",
            "Host": "kof.cmk4tzokwqsd.us-west-2.rds.amazonaws.com",
            "doesExist": true
          },
          "rdsInstanceResources": [],
          "projectRegion": "us-west-2",
          "mode": 1,
          "additionalFiles": [],
          "params": {
            "query": "",
            "inserts": ""
          },
          "isGlobalEditMode": false,
          "enableInject": true,
          "isNewFromGlobal": false
        }
      },
      "apigusWest2KOFClientesGatewayaltapost": {
        "name": "apigusWest2KOFClientesGatewayaltapost",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "KOFClientesGateway",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "alta",
          "resourcePath": "/alta",
          "restMethod": "POST",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "Prod",
          "mode": 0
        }
      }
    },
    "customTemplate": {
      "dialect": null,
      "definitions": {}
    },
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      },
      {
        "lambdaId": "b923f823-ef31-4b00-90ab-f20e7764551a",
        "varKey": "PYTHONPATH",
        "varValue": "/var/runtime:/var/task/LambdaSNS",
        "shouldPersist": true,
        "displayOnly": false,
        "editable": true
      }
    ],
    "packageJSON": {
      "dependencies": {
        "aws-sdk": {
          "name": "aws-sdk",
          "language": "javascript",
          "version": "2.176.0",
          "dev": true,
          "notRemovable": false
        },
        "request": {
          "name": "request",
          "version": "2.88.0",
          "language": "javascript"
        },
        "pandas": {
          "name": "pandas",
          "version": "0.25.0",
          "dev": false,
          "language": "python"
        },
        "tinys3": {
          "name": "tinys3",
          "version": "0.1.12",
          "dev": false,
          "language": "python"
        },
        "xlrd": {
          "name": "xlrd",
          "version": "1.2.0",
          "dev": false,
          "language": "python"
        },
        "json2xls": {
          "name": "json2xls",
          "version": "0.1.2",
          "language": "javascript"
        },
        "json2csv": {
          "name": "json2csv",
          "version": "4.5.2",
          "language": "javascript"
        },
        "csvtojson": {
          "name": "csvtojson",
          "version": "2.0.10",
          "language": "javascript"
        },
        "uuid": {
          "name": "uuid",
          "version": "3.3.3",
          "language": "javascript"
        },
        "slappforge-sdk-aws": {
          "name": "slappforge-sdk-aws",
          "language": "javascript",
          "version": "0.0.5",
          "dev": false,
          "notRemovable": false
        },
        "mysql": {
          "name": "mysql",
          "version": "2.17.1",
          "language": "javascript"
        }
      }
    }
  },
  "PROJECT_META": {
    "projectName": "LambdaSNS",
    "projectDescription": "API para habilitar servicio SMS en pilotos KOF",
    "projectVersion": "1.0.0",
    "projectRegion": "us-west-2",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1567535518704
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "LambdaSNS",
      "url": "https://github.com/Kevin-Olascoaga/LambdaKOF"
    }
  }
}